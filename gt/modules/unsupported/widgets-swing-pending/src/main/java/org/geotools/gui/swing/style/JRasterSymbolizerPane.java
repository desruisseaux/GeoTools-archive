/*
 *    GeoTools - OpenSource mapping toolkit
 *    http://geotools.org
 *    (C) 2002-2007, GeoTools Project Managment Committee (PMC)
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotools.gui.swing.style;

import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Map;
import javax.swing.JComponent;

import org.geotools.gui.swing.style.sld.JExpressionPane;
import org.geotools.map.MapLayer;
import org.geotools.styling.FeatureTypeStyle;
import org.geotools.styling.RasterSymbolizer;
import org.geotools.styling.Rule;
import org.geotools.styling.Style;
import org.geotools.styling.StyleBuilder;
import org.geotools.styling.Symbolizer;

/**
 *
 * @author  johann sorel
 */
public class JRasterSymbolizerPane extends javax.swing.JPanel implements SymbolizerPane<RasterSymbolizer> {

    private RasterSymbolizer symbol = null;
    private MapLayer layer = null;

    /** Creates new form RasterStylePanel
     * @param layer the layer style to edit
     */
    public JRasterSymbolizerPane() {
        initComponents();
        init();
    }

    public void apply() {
        if (symbol != null) {
            symbol.setOpacity(GuiOpacity.getExpression());
        }
    }

    private void init() {

        GuiOpacity.setType(JExpressionPane.EXP_TYPE.NUMBER);

        tabDemo.addMouseListener(new MouseListener() {

            public void mouseClicked(MouseEvent e) {
                int ligne;
                Point p = e.getPoint();
                ligne = tabDemo.rowAtPoint(p);
                if (ligne < tabDemo.getModel().getRowCount() && ligne >= 0) {
                    setEdited((RasterSymbolizer) tabDemo.getModel().getValueAt(ligne, 0));
                }
            }

            public void mousePressed(MouseEvent e) {
            }

            public void mouseReleased(MouseEvent e) {
            }

            public void mouseEntered(MouseEvent e) {
            }

            public void mouseExited(MouseEvent e) {
            }
        });
    }

    public void setDemoSymbolizers(Map<RasterSymbolizer, String> symbols) {
        tabDemo.setMap(symbols);
    }

    public Map<RasterSymbolizer, String> getDemoSymbolizers() {
        return tabDemo.getMap();
    }

    public void setStyle(Style style) {

        FeatureTypeStyle[] sty = style.getFeatureTypeStyles();

        Rule[] rules = sty[0].getRules();
        for (int i = 0; i < rules.length; i++) {
            Rule r = rules[i];

            //on regarde si la regle s'applique au maplayer (s'il n'y a aucun filtre)
            if (r.getFilter() == null) {
                Symbolizer[] symbolizers = r.getSymbolizers();
                for (int j = 0; j < symbolizers.length; j++) {

                    if (symbolizers[j] instanceof RasterSymbolizer) {
                        setEdited((RasterSymbolizer) symbolizers[j]);
                    }
                }
            }
        }
    }

    public Style getStyle() {
        StyleBuilder sb = new StyleBuilder();

        Style style = sb.createStyle();
        style.addFeatureTypeStyle(sb.createFeatureTypeStyle(getEdited()));

        return style;
    }

    public void setEdited(RasterSymbolizer sym) {
        symbol = (RasterSymbolizer) sym;

        if (sym != null) {
            GuiOpacity.setExpression(symbol.getOpacity());
            symbol.getChannelSelection();
            symbol.getColorMap();
            symbol.getContrastEnhancement();
            symbol.getGeometryPropertyName();
            symbol.getImageOutline();
            symbol.getOverlap();
            symbol.getShadedRelief();
        }
    }

    public RasterSymbolizer getEdited() {

        if (symbol == null) {
            StyleBuilder sb = new StyleBuilder();
            symbol = sb.createRasterSymbolizer();
        }
        apply();
        return symbol;
    }

    public JComponent getComponent() {
        return this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        GuiOpacity = new org.geotools.gui.swing.style.sld.JExpressionPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabDemo = new org.geotools.gui.swing.style.sld.JDemoTable();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/geotools/gui/swing/style/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("opacity")); // NOI18N

        jScrollPane1.setViewportView(tabDemo);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(GuiOpacity, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, GuiOpacity, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.geotools.gui.swing.style.sld.JExpressionPane GuiOpacity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.geotools.gui.swing.style.sld.JDemoTable tabDemo;
    // End of variables declaration//GEN-END:variables
    public void setLayer(MapLayer layer) {
        this.layer = layer;
        GuiOpacity.setLayer(layer);
    }

    public MapLayer getLayer() {
        return layer;
    }
}
