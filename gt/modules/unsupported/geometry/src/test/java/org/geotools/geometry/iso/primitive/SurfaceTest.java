package org.geotools.geometry.iso.primitive;

import java.util.ArrayList;
import java.util.List;

import junit.framework.TestCase;

import org.geotools.geometry.iso.FeatGeomFactoryImpl;
import org.geotools.geometry.iso.coordinate.CoordinateFactoryImpl;
import org.opengis.spatialschema.geometry.DirectPosition;
import org.opengis.spatialschema.geometry.geometry.Triangle;
import org.opengis.spatialschema.geometry.primitive.Ring;
import org.opengis.spatialschema.geometry.primitive.Surface;
import org.opengis.spatialschema.geometry.primitive.SurfacePatch;

/**
 * @author sanjay
 *
 */
public class SurfaceTest extends TestCase {
	
	public void testMain() {
		
		FeatGeomFactoryImpl tGeomFactory = FeatGeomFactoryImpl.getDefault2D();
		
		// Creates by SurfaceBoundary
		this._testSurface2(tGeomFactory);

		// Created by Patches
		this._testSurface1(tGeomFactory);
		
		
	}

	private List<Triangle> _testTriangle1(FeatGeomFactoryImpl aGeomFactory) {
		
		CoordinateFactoryImpl tCoordFactory = aGeomFactory.getCoordinateFactory();
		PrimitiveFactoryImpl tPrimFactory = aGeomFactory.getPrimitiveFactory();

		ArrayList<double[][]> tDoubleList = new ArrayList<double[][]>();
		tDoubleList.add(new double[][]{{0,0},{100,100},{100,0}});
		tDoubleList.add(new double[][]{{0,100},{100,100},{50,200}});
		tDoubleList.add(new double[][]{{50,200},{100,100},{150,200}});
		ArrayList<Triangle> triangleList = tCoordFactory.createTriangles(tDoubleList);
	    
		for (int i=0; i < triangleList.size(); i++) {
			Triangle triangle1 = triangleList.get(i);
			System.out.println(triangle1);
		}
	    
	    //System.out.println(triangle1.get.getEnvelope());
	    
	    //System.out.println(triangle1.getBoundary());
	    
		return triangleList;
	    
	}

	/**
	 * Create a surface on basis of SurfacePatches (Triangles)
	 * @param aGeomFactory
	 */
	private void _testSurface1(FeatGeomFactoryImpl aGeomFactory) {

		PrimitiveFactoryImpl tPrimFactory = aGeomFactory.getPrimitiveFactory();
		
		List<? extends SurfacePatch> triangleList = this._testTriangle1(aGeomFactory);
		
		List<SurfacePatch> surfacePatches1 = (List<SurfacePatch>)triangleList;

		Surface surface1 = tPrimFactory.createSurface(surfacePatches1);
		
		System.out.print("\n******************* SURFACE GENERATED BY SURFACEPATCHES");
		this.testSurfaces((SurfaceImpl) surface1);
		

	}

	public Surface _testSurface2(FeatGeomFactoryImpl aGeomFactory) {
		
		CoordinateFactoryImpl tCoordFactory = aGeomFactory.getCoordinateFactory();
		PrimitiveFactoryImpl tPrimFactory = aGeomFactory.getPrimitiveFactory();

		List<DirectPosition> directPositionList = new ArrayList<DirectPosition>();
		directPositionList.add(tCoordFactory.createDirectPosition(new double[] {20, 10}));
		directPositionList.add(tCoordFactory.createDirectPosition(new double[] {40, 10}));
		directPositionList.add(tCoordFactory.createDirectPosition(new double[] {50, 40}));
		directPositionList.add(tCoordFactory.createDirectPosition(new double[] {30, 50}));
		directPositionList.add(tCoordFactory.createDirectPosition(new double[] {10, 30}));
		directPositionList.add(tCoordFactory.createDirectPosition(new double[] {20, 10}));

		RingImpl exteriorRing = (RingImpl) tPrimFactory.createRingByDirectPositions(directPositionList);
		List<Ring> interiors = new ArrayList<Ring>();
		
		SurfaceBoundaryImpl surfaceBoundary1 = tPrimFactory.createSurfaceBoundary(exteriorRing, interiors );
		
		Surface surface2 = tPrimFactory.createSurface(surfaceBoundary1);
		
		System.out.print("\n******************* SURFACE GENERATED BY SURFACEBOUNDARY");

		
		this.testSurfaces((SurfaceImpl) surface2);
		
		// clone()
		SurfaceImpl surface3 = null;
		try {
			surface3 = (SurfaceImpl) surface2.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
		assertTrue(surface2 != surface3);
		this.testSurfaces((SurfaceImpl) surface3);

		return surface2;

	}
	
	
	private void testSurfaces(SurfaceImpl surface) {

		try {
			System.out.print("\nSurface: " + surface);
		} catch (NullPointerException e) {
		}
		System.out.print("\ngetBoundary: " + surface.getBoundary());
		System.out.print("\ngetEnvelope: " + surface.getEnvelope());
		System.out.print("\ngetCoordinateDimension: " + surface.getCoordinateDimension());
		System.out.print("\ngetDimension: " + surface.getDimension(null));
		

	}


	

}
