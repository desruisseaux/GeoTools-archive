/*
 *    Geotools2 - OpenSource mapping toolkit
 *    http://geotools.org
 *    (C) 2002, Geotools Project Managment Committee (PMC)
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 */
/*
 * Created on 29-feb-2004
 */
package org.geotools.demo.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.net.URL;
import javax.swing.JFrame;
import javax.swing.WindowConstants;

import org.geotools.gui.swing.StyledMapPane;
import org.geotools.map.DefaultMapContext;
import org.geotools.map.MapContext;
import org.geotools.styling.ColorMap;
import org.geotools.styling.RasterSymbolizer;
import org.geotools.styling.StyleBuilder;

import org.geotools.data.coverage.grid.GridCoverageExchange;
import org.geotools.data.coverage.grid.GridCoverageReader;
//import org.geotools.data.coverage.grid.GridFormatFinder;
import org.geotools.data.coverage.grid.Format;
import org.geotools.gc.GridCoverage;

import org.opengis.parameter.ParameterValueGroup;
import org.opengis.parameter.ParameterDescriptorGroup;


/**
 * Simple class that shows how to load and symbolize a DEM from an ascii export 
 * file generated by GRASS. Updated to use the new GridCoverageExchange interface
 * (using the Format interface to create the GridCoverageReader instead of the
 * GridCoverageExchange).
 *
 * @author aaime
 * @author rschulz
 */
public class ArcGridReader {
    public static void main(String[] args) throws Exception {
        
        //create the grid coverage reader
        URL url = ArcGridReader.class.getClassLoader().getResource("org/geotools/sampleData/spearfish_dem.asc.gz");
        Format f = new org.geotools.gce.arcgrid.ArcGridFormat();  //GridFormatFinder.findFormat(url); //also works
        GridCoverageReader reader = f.getReader(url);
        
        //get the parameters and set them
        ParameterDescriptorGroup paramDescriptor = f.getReadParameters();
        ParameterValueGroup params = (ParameterValueGroup) paramDescriptor.createValue();
        params.parameter( "Compressed" ).setValue( true );
        params.parameter( "GRASS" ).setValue( true );
        
        //read the grid
        if (reader.hasMoreGridCoverages()) {                 //not yet implemented in arcgrid
            System.out.println("Reader has a GC to read");   
        }
        GridCoverage gc = reader.read( params );
        
        //create a style
        StyleBuilder sb = new StyleBuilder();
        ColorMap colorMap = sb.createColorMap(new double[] { 1000, 1300, 1600, 1900 },
                new Color[] {
                    new Color(0, 100, 0), new Color(150, 150, 50), new Color(200, 200, 50),
                    Color.WHITE
                }, ColorMap.TYPE_RAMP);
        RasterSymbolizer rs = sb.createRasterSymbolizer(colorMap, 1.0);
        
        //add the grid coverage to the map using the style
        MapContext mc = new DefaultMapContext();
        mc.addLayer(gc, sb.createStyle(rs));
        StyledMapPane mapPane = new StyledMapPane();
        mapPane.setMapContext(mc);

        JFrame frame = new JFrame();
        frame.setContentPane(mapPane.createScrollPane());
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setSize(new Dimension(640, 480));
        frame.setTitle("Spearfish DEM");
        frame.show(); 
    }
}
