/*
 * NOTICE OF RELEASE TO THE PUBLIC DOMAIN
 *
 * This work was created by employees of the USDA Forest Service's 
 * Fire Science Lab for internal use.  It is therefore ineligible for 
 * copyright under title 17, section 105 of the United States Code.  You 
 * may treat it as you would treat any public domain work: it may be used,
 * changed, copied, or redistributed, with or without permission of the 
 * authors, for free or for compensation.  You may not claim exclusive 
 * ownership of this code because it is already owned by everyone.  Use this 
 * software entirely at your own risk.  No warranty of any kind is given.
 * 
 * A copy of 17-USC-105 should have accompanied this distribution in the file 
 * 17USC105.html.  If not, you may access the law via the US Government's 
 * public websites: 
 *   - http://www.copyright.gov/title17/92chap1.html#105
 *   - http://www.gpoaccess.gov/uscode/  (enter "17USC105" in the search box.)
 */
package org.geotools.gce.geotiff;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import javax.swing.JFileChooser;

import org.geotools.cs.CoordinateSystemAuthorityFactory;
import org.geotools.cs.CoordinateSystemFactory;
import org.geotools.cs.CoordinateSystemModifiedEPSGFactory;
import org.geotools.data.coverage.grid.GridCoverageReader;
import org.geotools.gc.GridCoverage;
//import com.sun.media.jai.codec.* ; 

/**
 * <CODE>TiffMetadataOpener</CODE> is a small test program which allows
 * the user to select a Geotiff file, then displays the list of 
 * GeoKeys in text format.
 *
 * @author  Bryce Nordgren / USDA Forest Service
 */
public class GeoTiffReaderTest extends javax.swing.JFrame {
    
    private static JFileChooser jfc = new JFileChooser() ;
    
    /** Creates new form TiffMetadataOpener */
    public GeoTiffReaderTest() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        
        pack();
    }//GEN-END:initComponents
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new GeoTiffReaderTest().show();
        
        int result = jfc.showOpenDialog(null) ;
        int last_i =0; 
        if (result == jfc.APPROVE_OPTION) {
            try { 
                // Make an EPSG authority factory which is connected
                // to my postgis database
                System.out.println("Connecting to EPSG") ;
                Class.forName("org.postgresql.Driver") ; 
                Connection conn = DriverManager.getConnection(
                    "jdbc:postgresql://localhost/epsg", "epsg_reader","") ;
                CoordinateSystemAuthorityFactory epsgFactory = 
                  new CoordinateSystemModifiedEPSGFactory(
                     CoordinateSystemFactory.getDefault(),
                     conn) ; 
                
                // make the factory cache
//                CoordinateSystemAuthorityFactory epsgFactory = 
//   			CoordinateSystemEPSGFactoryCache.getDefault() ; 

                // make a new GeoTiff Format object
                GeoTiffFormat fmt = new GeoTiffFormat() ; 
                fmt.setFactory(epsgFactory) ; 
                
                // get the reader object and try constructing the Grid Coverage
                GridCoverageReader reader = fmt.getReader(jfc.getSelectedFile()) ; 
                GridCoverage gc = reader.read(null) ; 
            } catch(IOException ioe) {
                System.out.println(ioe.getMessage() ); 
            } catch (ClassNotFoundException cnf) {
                System.out.println("JDBC Driver not found") ; 
            } catch (SQLException sqle) { 
                System.out.println("Error connecting to database");  
                System.out.println(sqle.getMessage()) ; 
            }
        }
        
        System.out.println("Done.") ; 
        System.exit(0);  
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
