/*
 * NOTICE OF RELEASE TO THE PUBLIC DOMAIN
 *
 * This work was created by employees of the USDA Forest Service's 
 * Fire Science Lab for internal use.  It is therefore ineligible for 
 * copyright under title 17, section 105 of the United States Code.  You 
 * may treat it as you would treat any public domain work: it may be used,
 * changed, copied, or redistributed, with or without permission of the 
 * authors, for free or for compensation.  You may not claim exclusive 
 * ownership of this code because it is already owned by everyone.  Use this 
 * software entirely at your own risk.  No warranty of any kind is given.
 * 
 * A copy of 17-USC-105 should have accompanied this distribution in the file 
 * 17USC105.html.  If not, you may access the law via the US Government's 
 * public websites: 
 *   - http://www.copyright.gov/title17/92chap1.html#105
 *   - http://www.gpoaccess.gov/uscode/  (enter "17USC105" in the search box.)
 */
package org.geotools.gce.geotiff;

import javax.swing.* ; 
import javax.imageio.* ; 
import javax.imageio.metadata.* ; 
import javax.imageio.stream.* ; 
import java.util.* ; 
import java.sql.DriverManager ; 
import java.sql.Connection ;
import java.io.IOException ;
import java.sql.SQLException ; 
import org.opengis.referencing.FactoryException ; 
import org.geotools.cs.CoordinateSystemAuthorityFactory ;
import org.geotools.cs.CoordinateSystemModifiedEPSGFactory ; 
import org.geotools.cs.CoordinateSystem ; 
import org.geotools.cs.CoordinateSystemFactory ;


import javax.media.jai.* ; 
//import com.sun.media.jai.codec.* ; 

/**
 * <CODE>TiffMetadataOpener</CODE> is a small program which allows users 
 * to select a geoTIFF file, then dumps the GeoKeys to standard out.
 *
 * @author  Bryce Nordgren / USDA Forest Service
 */
public class TiffMetadataOpener extends javax.swing.JFrame {
    
    private static JFileChooser jfc = new JFileChooser() ;
    
    /** Creates new form TiffMetadataOpener */
    public TiffMetadataOpener() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        
        pack();
    }//GEN-END:initComponents
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new TiffMetadataOpener().show();
        
        int result = jfc.showOpenDialog(null) ;
        int last_i =0; 
        if (result == jfc.APPROVE_OPTION) {
            try { 
                System.out.println("Getting the image metadata.") ; 

                /*
                ImageInputStream is = new FileImageInputStream(jfc.getSelectedFile());
                Iterator it = ImageIO.getImageReaders( is ); 
                ImageReader ir = (ImageReader)(it.next()) ;
                ir.setInput(is) ; 
                IIOMetadata metadata = ir.getImageMetadata(0) ; 
                ir.dispose() ; 
                is.close() ; 
                 */
                
                //SeekableStream ss = new FileSeekableStream(jfc.getSelectedFile()) ; 
                RenderedOp ro = JAI.create("ImageRead", jfc.getSelectedFile().getAbsolutePath()) ; 
                System.out.println(ro.getClass().getName()) ; 
                String[] props = (ro.getPropertyNames());
                for (int i=0; i < props.length; i++) {
                    System.out.println(props[i]) ; 
                }
                Object o = ro.getProperty("JAI.ImageMetadata") ; 
                System.out.println(o.getClass().getName()) ; 
                
                IIOMetadata iio  = (IIOMetadata)o ; 
                GeoTiffIIOMetadataAdapter adapter = new GeoTiffIIOMetadataAdapter(iio) ;

                System.out.println("Get model tie points");
                double []tiePoints = adapter.getModelTiePoints() ; 
                System.out.println("There are " + tiePoints.length/6 + " tie points") ;
                for (int i=0 ;i < (tiePoints.length/6); i++) {
                    int j = i*6 ; 
                    System.out.print("TP #" + i + ": ") ; 
                    System.out.print("["+ tiePoints[j]) ; 
                    System.out.print(","+ tiePoints[j+1]) ; 
                    System.out.print(","+ tiePoints[j+2]) ; 
                    System.out.print("] -> ["+ tiePoints[j+3]) ; 
                    System.out.print(","+ tiePoints[j+4]) ; 
                    System.out.println(","+ tiePoints[j+5] + "]") ; 
                }
                
                System.out.println("Get the model pixel scale: ") ;
                double []pixScale = adapter.getModelPixelScales() ; 
                if (pixScale != null ) {
                    System.out.println("["+pixScale[0]+","+pixScale[1]+
                          "," + pixScale[2]+"]") ; 
                }
                
                System.out.println("Get the pixel model transformation: ") ;
                double []pixTransform = adapter.getModelTransformation() ; 
                if (pixTransform != null) {
                    System.out.println("[") ;
                    for (int i=0; i<4 ; i++) {
                        int j = i*4 ; 
                        System.out.print(" [" + pixTransform[j]) ; 
                        System.out.print(","+pixTransform[j+1]) ; 
                        System.out.print(","+pixTransform[j+2]) ; 
                        System.out.println(","+pixTransform[j+3]+"]");
                    }
                    System.out.println("]");
                }
                
                int numTags = adapter.getNumGeoKeys() ; 
                System.out.println("Image has " + numTags + " geo Key tags!") ;
                for (int i=0; i < numTags; i++) {
                    System.out.print("GeoKey #"+(i+1)+ ": ");  
                    GeoTiffIIOMetadataAdapter.GeoKeyRecord rec = adapter.getGeoKeyRecordByIndex(i) ; 
                    last_i = rec.getKeyID()  ; 
                    System.out.println("["+rec.getKeyID()+","+adapter.getGeoKey(rec.getKeyID())+"]") ; 
                }

                try {
                    // Make an EPSG authority factory which is connected
                    // to my postgis database
                    System.out.println("Connecting to EPSG") ;
                    Class.forName("org.postgresql.Driver") ; 
                    Connection conn = DriverManager.getConnection(
                        "jdbc:postgresql://localhost/epsg", "epsg_reader","") ;
                    CoordinateSystemAuthorityFactory epsgFactory = 
                      new CoordinateSystemModifiedEPSGFactory(
                         CoordinateSystemFactory.getDefault(),
                         conn) ; 

                    System.out.println("Get the projection code") ;
                    String projectionCode = 
                       adapter.getGeoKey(
                          GeoTiffIIOMetadataAdapter.GeographicTypeGeoKey) ; 
                    System.out.println("Projection code =" + projectionCode);

                    if (projectionCode==null) {

                      projectionCode = adapter.getGeoKey(
                          GeoTiffIIOMetadataAdapter.ProjectedCSTypeGeoKey);
                    }


                    CoordinateSystem cs = null ; 
                    if (projectionCode == null) { 
                      System.out.println("Cannot find CS information for TIFF.");
                    } else { 
                      cs = epsgFactory.createCoordinateSystem(projectionCode) ; 
                    }

                    System.out.println((cs==null)?"null":cs.toString()) ; 

                } catch (FactoryException fe) {
                    System.err.println("Factory Exception") ; 
                } catch (SQLException sqle){
                    System.err.println("SQLException") ; 
                    System.err.println(sqle.getMessage()) ;
                } 
                  
                System.exit(0);  
            //} catch(IOException ioe) {
            } catch (StringIndexOutOfBoundsException oob) { 
                System.out.println("Dude: "+last_i) ;
            } catch (ClassNotFoundException cnf) {}
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
