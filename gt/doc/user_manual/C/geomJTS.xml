<!-- Top Level, a description with the chapter TOC -->
<para>
  This chapter explains the geometric model used in &geot;. The geometric model 
  provides the structure through which the Geotools library defines the spatial 
  properties of its Features.
</para>

<warning>
  <para>
    &geot; uses the Java Topology Suite (JTS) library for all of its geometric
    representation. Note also, that all access is done directly into JTS classes
    rather than working through an abstract layer of interfaces. The &geot; 
    project intends eventually to switch to use an internal geometric 
    representation and to develop and use a standard set of GeoAPI interfaces.
  </para>
</warning>

<note>
  <para>
    Most development using &geot; library can be done at a higher level than 
    opertating directly on the geometric model itself. The information in this 
    section may be most relevant simply as background for the use of operations 
    at a higher level.
  </para>
</note>



<sect1 id="sect-geomJTS-intro">
  <title>Geometries in Geotools</title>

  <para>
     The core geometric model of &geot; uses lightweight objects.
    <figure id="fig-geotools-geomModel">
      <title>The Geotools Geometric Model.</title>
      <screenshot>
        <mediaobject>
        <imageobject>
          <imagedata fileref="figures/geotools-geomModel.png" 
                     format="PNG" />
        </imageobject>
        <textobject>
          <phrase>
            An image of the geometric model containing only JTS.
          </phrase>
        </textobject>
	<caption>
	  <para>
	    &geot; does not use its own geometric model but instead relies on 
            the JTS library.
	  </para>
	</caption>
        </mediaobject>
      </screenshot>
    </figure>
  </para>

  <sect2 id="sect-geomJTS-intro-core">
    <title>The core components of Geotools Geometries</title>

    <para>
      TODO: Make a table... Core classes;API;Modules;Packages;Create
    </para>

    <para>
    <figure id="fig-geotools-geomExample">
      <title>An example geometry.</title>
      <screenshot>
        <mediaobject>
        <imageobject>
          <imagedata fileref="figures/JTS_Architecture.png" 
                     format="PNG" />
        </imageobject>
        <textobject>
          <phrase>
            An image of a JTS geometry.
          </phrase>
        </textobject>
	<caption>
	  <para>
	    A JTS Geometry with its 2D projection and its envelope.
	  </para>
	</caption>
        </mediaobject>
      </screenshot>
    </figure>
    </para>

  </sect2>

  <sect2 id="sect-geomJTS-JTS">
    <title>The Java Topology Suite (JTS)</title>
    
    <para>
     The JTS library was developed by Vivid Solutions with the intent to create a spatial model sufficiently rich to fully describe 'Simple Features' according to the Simple Features Specification for SQL (SFS) of the  Open Geospatial Consortium (OpenGIS or OGC). Since Geotools shared the same intent and because of the quality and progress of the JTS library when the Geotools project began, the Geotools project decided to rely entirely on the JTS project.
    </para>
    
    <para>
      The 'Simple Features' spatial model supported by the JTS project is fundamentally a two dimensional spatial model in a Euclidean space with orthogonal axes. While, as documented below, the JTS library provides the space for three numeric values in its fundamental coordinate data structure and the library allows the inclusion of a Spatial Reference Identification (SRID) number in an optional user data object in the fundamental geometric data strcutures, both the third ('z') coordinate and the SRID are ignored in all JTS operations. TODO: Verify again that this is correct.
    </para>

    <para>
      TODO: Discuss here precision, replaceable coordinates, the complexity 
      in the details...
    </para>

  </sect2>
  
    <sect2 id="sect-geomJTS-future">
    <title>Future work</title>
    
    <para>
      The Geotools project eventually intents to migrate to a more complex spatial model described by the International Organization for Standardization (ISO) 19107 Standard "Spatial Schema" which will be essentially identical to the new OpenGIS Abstract Specification, Topic 1: "Feature Geometry". This new standard introduces more complex geometry, more advanced spatial operators and will involve a tremendous amount of work.
    </para>

  </sect2>

</sect1>






<sect1 id="sect-geomJTS-runThrough">
  <title>A quick run through</title>

  <para>
     
  </para>
<!--
  <sect2 id="">
    <title></title>

    <para>
    </para>

  </sect2>
-->
</sect1>



<sect1 id="sect-geomJTS-resources">
  <title>Resources</title>

  <para>
     Geometries and their analysis in computation systems present particular 
     issues and challenges. The scientific field of Computational Geometry 
     has emerged to tackle many of these isssues. Some of the most important
     issues are presented elsewhere in this manual: see section 
     <xref linkend="sect-geoSci-compGeom"/>.
  </para>

  <sect2 id="sect-geomJTS-resources-doc">
    <title>Documentation</title>

    <para>
      JTS has its own suite of documentation, scattered in several places. The 
      <ulink url="http://www.vividsolutions.com/jts/jtshome.htm" type="http">
      older web site</ulink> has documentation, see especially the 'Discussion' 
      section. The 
      <ulink url="http://www.jump-project.org/]" type="http">
      current web site</ulink> where the current coordination occurs includes a
      <ulink url="http://lists.jump-project.org/pipermail/jts-devel/" type="http">
      mailing list</ulink>. JTS releases are hosted on the
      <ulink url="http://sourceforge.net/projects/jts-topo-suite/" type="http">
      sourceforge site</ulink>.
    </para>

    <para>
      The JTS Javadocs also contain useful information, although, through 
      version 1.7.1, these are fairly thin except for:
      <itemizedlist>
        <listitem>
          <para>
            Package com.vividsolutions.jts.algorithm#Description (scroll down)
          </para>
        </listitem>
        <listitem>
          <para>
            Package com.vividsolutions.jts.overlay#Description
          </para>
        </listitem>
        <listitem>
          <para>
            Package com.vividsolutions.jts.relate#Description
          </para>
        </listitem>
        <listitem>
          <para>
            Class com.vividsolutions.jts.Geometry
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      JTS also has useful documentation in the zip distribution itself, in the 
      'doc/' directory. This includes: 
      <itemizedlist>
        <listitem>
          <para>
            The JTS Developer Guide
          </para>
        </listitem>
        <listitem>
          <para>
            The JTS Technical Specification
          </para>
        </listitem>
      </itemizedlist>
      which are valuable resources to understand the issue of computational 
      precision in the JTS library.
    </para>

  </sect2>

</sect1>



<sect1 id="sect-geomJTS-practical">
  <title>Practical Code Information</title>

  <para>
     
  </para>

  <sect2 id="sect-geomJTS-practical-utilClass">
    <title>Utility Classes</title>

    <para>
    </para>

  </sect2>

  <sect2 id="sect-geomJTS-practical-factory">
    <title>Factory System</title>

    <para>
    </para>

  </sect2>


  <sect2 id="sect-geomJTS-practical-precision">
    <title>Precision Model</title>

    <para>
    </para>

  </sect2>


</sect1>



<sect1 id="sect-geomJTS-Coordinate">
  <title>Coordinates</title>

  <para>
    JTS Coordinate objects are lightweight entities with fields 
    (.x, .y, and .z), each holding a 'double' value.
    <figure id="fig-geotools-geomJTS-coord">
      <title>JTS Coordinates.</title>
      <screenshot>
        <mediaobject>
        <imageobject>
          <imagedata fileref="figures/JTS_Coordinate.png" 
                     format="PNG" />
        </imageobject>
        <textobject>
          <phrase>
            An image of the JTS Coordinate class.
          </phrase>
        </textobject>
	<caption>
	  <para>
	    Key aspects of the JTS Coordinate class.
	  </para>
	</caption>
        </mediaobject>
      </screenshot>
    </figure>
  </para>

  <warning>
    <title>JTS Operations are 2D only</title>
    <para>
      While JTS allows the inclusion of a thrid 'z' coordinate, <emphasis>this coordinate is never used in JTS operations</emphasis>! JTS performs all of its operations in the projected x-y plane. 
    </para>
  </warning>

  <para>
    Instances of these Coordinate values provide the spatial information for the JTS Geometry objects. Construction of Coordinate objects involves simple calls to the class constructor methods.
  </para>


<!--
  <sect2 id="">
    <title></title>

    <para>
    </para>

  </sect2>
-->
</sect1>



<sect1 id="sect-geomJTS-Envelope">
  <title>Envelopes</title>

  <para>
     JTS Envelope objects are axis parallel, rectangular regions of the x-y plane. Instances of this class are used expecially to define the outer extent of each JTS Geometry and every Geotools Feature using the concept of a 'bounding-box' which is an axis-parallel, rectilinear region.
    <figure id="fig-geotools-geomJTS-envelope">
      <title>JTS Envelope.</title>
      <screenshot>
        <mediaobject>
        <imageobject>
          <imagedata fileref="figures/JTS_Envelope.png" 
                     format="PNG" />
        </imageobject>
        <textobject>
          <phrase>
            An image of the JTS Envelope class.
          </phrase>
        </textobject>
	<caption>
	  <para>
	    Key aspects of the JTS Envelope class.
	  </para>
	</caption>
        </mediaobject>
      </screenshot>
    </figure>
  </para>

  <para>
     Construction of Envelope objects involves simple calls to the class constructor methods.
  </para>


<!--
  <sect2 id="">
    <title></title>

    <para>
    </para>

  </sect2>
-->
</sect1>



<sect1 id="sect-geomJTS-geometry">
  <title>Geometries</title>

  <para>
    JTS Geometry objects define the fundamental spatial elements in the Geotools Geometric Model. JTS Geometry objects include Point, LineString, with a LinearRing which has a common end-point coordinate, Polygon, and Collection sub-classes, the latter further sub-classed into MultiPoint, MultiLineString, and MultiPolygon.
    <figure id="fig-geotools-geomJTS-geom">
      <title>JTS Envelope.</title>
      <screenshot>
        <mediaobject>
        <imageobject>
          <imagedata fileref="figures/JTS_Geometry.png" 
                     format="PNG" />
        </imageobject>
        <textobject>
          <phrase>
            An image of the JTS Geometry class.
          </phrase>
        </textobject>
	<caption>
	  <para>
	    Key aspects of the JTS Geometry class.
	  </para>
	</caption>
        </mediaobject>
      </screenshot>
    </figure>
  </para>

  <para>
    Conceptually, Geometry objects have, as internal fields, Coordinate objects to define the spatial nature of the Geometry, a type element describing the nature of the Geometry, an Envelope object defining the extent of the Geometry, and an optional User Data object element in which any object can be stored for programmatic convenience. Geometry objects include convenience methods such as the toText() method which converts any Geometry instance into an equivalent representation in Well Known Text (WKT) a formally defined representation of the spatial definintion of the Geometry object using a Java String. Geometry objects also include a number of spatial operator methods such as two returing Java double values, distance() and area(), and two returning new Geometry objects, convexHull() and buffer(). Construction of Geometry objects is done through the creation of a GeometryFactory object as explained in the first tutorial.
  </para>
<!--
  <sect2 id="">
    <title></title>

    <para>
    </para>

  </sect2>
-->
</sect1>


<sect1 id="sect-geomJTS-tutorials">
  <title>Tutorials</title>

  <para>
    The "gt/demo/geomJTS/" directory has a number of tutorials which might be 
    useful to understand the JTS library and the &geot; geometry model.
  </para>
<!--
  <sect2 id="">
    <title></title>

    <para>
    </para>

  </sect2>
-->
</sect1>



<sect1 id="sect-geomJTS-readCode">
  <title>Reading more Code</title>

  <para>
    JTS geometries are used throughout the &geot; code base. Some especially 
    interesting areas to read are: TODO
  </para>
<!--
  <sect2 id="">
    <title></title>

    <para>
    </para>

  </sect2>
-->
</sect1>
