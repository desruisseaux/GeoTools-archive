<chapter id="chapter-geomJTS">
  <title>Library: JTS</title>

  <!-- Top Level, a description with the chapter TOC -->
  <para>
    This chapter explains one of the two geometric models used in the Geotools
    library. Geotools uses the Java Topology Suite (JTS) library directly for 
    its implementation of feature geometries, that is, for the geometric 
    representation of the spatial presence of real world entities. However, 
    because the JTS library operates strictly in an orthogonal, two-dimensional, 
    euclidean space, Geotools uses a separate geometric system to represent 
    positions and extents on the earth's surface. This chapter explains the use 
    by Geotools of the JTS geometric library; 
    <xref linkend="chapter-geomGeoAPI"/> explains the use of the geo-referenced 
    geometric model defined in GeoAPI interfaces.
  </para>
  
  
  <!-- Critical Warnings -->
  
  
  <sect1 id="sect-geomJTS-intro">
    <title>Introduction</title>
    
    <!--Overview and when not to read the chapter -->
    <para>
      Geotools currently uses the Java Topology Suite (JTS) library to 
      represent the spatial characteristics of the geospatial features through 
      which Geotools represents real world entities. JTS provides a powerful, 
      complete, numerically robust implementation of the geometric model 
      required by the Simple Features for SQL standard. 
    </para>
    
    
    <note>
      <title>Users are not required to work directly with geometries.</title>
      <para>
        Most development using &geot; library can be done at a higher level than 
        operating directly on the geometric model itself. The information in 
        this section may be most relevant simply as background for the use of 
        operations at a higher level.
      </para>
    </note>
    
    <para>
      The JTS library was developed by Vivid Solutions with the intent to create 
      a spatial model sufficiently rich to fully describe 'Simple Features' 
      according to the Simple Features Specification for SQL (SFS) of the 
      Open Geospatial Consortium (OpenGIS or OGC). Since Geotools shared the 
      same intent and because of the quality and progress of the JTS library 
      when the Geotools project began, the Geotools project decided to rely 
      entirely on the JTS project.
    </para>
    
    <para>
      The 'Simple Features' spatial model supported by the JTS project is 
      fundamentally a two dimensional spatial model in a Euclidean space with 
      orthogonal axes. While, as documented below, the JTS library provides the 
      space for three numeric values in its fundamental coordinate data 
      structure and the library allows the inclusion of a Spatial Reference 
      Identification (SRID) number in an optional user data object in the 
      fundamental geometric data structures, both the third ('z') coordinate and 
      the SRID are ignored in all JTS operations. 
    </para>


    <para>
      TODO: Discuss here precision, replaceable coordinates, the complexity 
      in the details...
    </para>
    
    <para>
      This chapter discusses version 1.7.2 of the JTS library.
    </para>
    
    <para>
      While the JTS library has provided a powerful and complete implementation 
      of the spatial model defined in the Simple Features for SQL specification, 
      the Geotools project plans to migrate to the more complex spatial model 
      described by the 19107 Standard "Spatial Schema" of the International 
      Organization for Standardization (ISO) which will be essentially identical 
      to the new Abstract Specification, Topic 1: "Feature Geometry" of the 
      Open Geospatial Consortium (OpenGIS). This new
      standard requires true three dimensional geometric structures, requires 
      more complex geometric constructs such as curves defined as Bezier 
      structures, and defines more advanced spatial operators. The Geotools 
      project plans to develop this new geometric model in two parts, one 
      defining, as part of the 
      GeoAPI project, a set of interfaces into the geometric model and a second 
      implementing the interfaces in a module of the Geotools project itself.
    </para>
  
    
    
    <sect2 id="sect-geomJTS-intro-usage">
      <title>Usage</title>
      
      <para>
      </para>
      
    </sect2>
    
    
    
    <sect2 id="sect-geomJTS-intro-warnings">
      <title>Warnings</title>
      
      <warning>
        <title>Geotools will move to GeoAPI geometries</title>
        <para>
          While Geotools currently uses the JTS library for its geometric 
          representation, the project plans to develop a full set of 
          interfaces in the GeoAPI project, implement these interfaces in 
          a Geotools module, and move the spatial description of features 
          to this new geometric model.
        </para>
      </warning>
      
      <warning>
        <title></title>
        <para>
          
        </para>
      </warning>
      
    </sect2>
    
    
    
    <sect2 id="sect-geomJTS-intro-model">
      <title>Instance Object Model</title>
      
      <para>
      </para>
      
      <para>
      <figure id="fig-geotools-geomExample">
        <title>An example geometry.</title>
        <screenshot>
          <mediaobject>
          <imageobject>
            <imagedata fileref="figures/JTS_Architecture.png" 
                       format="PNG" />
          </imageobject>
          <textobject>
            <phrase>
              An image of a JTS geometry.
            </phrase>
          </textobject>
  	<caption>
  	  <para>
  	    A JTS Geometry with its 2D projection and its envelope.
  	  </para>
  	</caption>
          </mediaobject>
        </screenshot>
      </figure>
      </para>
      
    </sect2>
    
    
    
    <sect2 id="sect-geomJTS-intro-code">
      <title>Code Layout</title>
      
      <para>
      </para>
      
<table>
<title>Packages and their use</title>
<tgroup cols="2">
<thead>
<row>
  <entry>Package</entry>
  <entry>Use</entry>
</row>
</thead>
<tbody>
<row>
  <entry>
    <para>com.vividsolutions.jts.algorithm
    </para>
  </entry>
  <entry>
    <para>Base computational geometry methods
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>com.vividsolutions.jts.geom
    </para>
  </entry>
  <entry>
    <para>Core classes for users
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>com.vividsolutions.jts.geomgraph
    </para>
  </entry>
  <entry>
    <para>Topological methods on planar graphs
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>com.vividsolutions.jts.index
    </para>
  </entry>
  <entry>
    <para>Several indexing systems
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>com.vividsolutions.jts.io
    </para>
  </entry>
  <entry>
    <para>Well Known Text formatting and parsing
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>com.vividsolutions.jts.linearref
    </para>
  </entry>
  <entry>
    <para>
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>com.vividsolutions.jts.noding
    </para>
  </entry>
  <entry>
    <para>Methods to add nodes to geometries
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>com.vividsolutions.jts.operation
    </para>
  </entry>
  <entry>
    <para>Complex geometric operations
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>com.vividsolutions.jts.planargraph
    </para>
  </entry>
  <entry>
    <para>Base elements of planar graphs
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>com.vividsolutions.jts.precision
    </para>
  </entry>
  <entry>
    <para>Alternative precision model elements
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>com.vividsolutions.jts.simplify
    </para>
  </entry>
  <entry>
    <para>Geometric simplification algorithms
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>com.vividsolutions.jts.util
    </para>
  </entry>
  <entry>
    <para>Utility classes
    </para>
  </entry>
</row>
</tbody>
</tgroup>
</table>

    </sect2>
    
    
    
    <sect2 id="sect-geomJTS-intro-keyClasses">
      <title>Key Classes</title>
      
      <para>
        The core classes in the JTS library are in the Geometry class hierarchy 
        along with the Envelope and Coordinate classes. All of the interfaces to
        these classes are directly in the JTS library packages themselves.
        
      </para>
          
<table>
<title>Key Classes</title>
<tgroup cols="3">
<thead>
<row>
  <entry>Class</entry>
  <entry>Creation</entry>
  <entry>Use</entry>
</row>
</thead>
<tbody>
<row>
  <entry>
    <para>Coordinate
    </para>
  </entry>
  <entry>
    <para>new(.)
    </para>
  </entry>
  <entry>
    <para>
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>Envelope
    </para>
  </entry>
  <entry>
    <para>new(.)
    </para>
  </entry>
  <entry>
    <para>
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>Geometry
    </para>
  </entry>
  <entry>
    <para><emphasis role="italic">abstract</emphasis>
    </para>
  </entry>
  <entry>
    <para>
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>Point
    </para>
  </entry>
  <entry>
    <para>myGeomFactory.createPoint(.)
    </para>
  </entry>
  <entry>
    <para>
    </para>
  </entry>
</row>
<row>
  <entry>
    <para>
    </para>
  </entry>
  <entry>
    <para>
    </para>
  </entry>
  <entry>
    <para>
    </para>
  </entry>
</row>
</tbody>
</tgroup>
</table>

    </sect2>
    
  </sect1>
  
  
  
  
  <sect1 id="sect-geomJTS-runThrough">
    <title>Run Through</title>

    <para>
      
    </para>
    <!--
    <sect2 id="">
      <title></title>

      <para>
        
      </para>

    </sect2>
    -->
  </sect1>
  
  
  
  
  <sect1 id="sect-geomJTS-resources">
    <title>Resources</title>

    <para>
       Geometries and their analysis in computation systems present particular 
       issues and challenges. The scientific field of Computational Geometry 
       has emerged to tackle many of these isssues. Some of the most important
       issues are presented elsewhere in this manual: see section 
       <xref linkend="sect-geoSci-compGeom"/>.
    </para>

    <sect2 id="sect-geomJTS-resources-doc">
      <title>Documentation</title>

      <para>
        JTS has its own suite of documentation, scattered in several places. The 
        <ulink url="http://www.vividsolutions.com/jts/jtshome.htm" type="http">
        older web site</ulink> has documentation, see especially the 'Discussion' 
        section. The 
        <ulink url="http://www.jump-project.org/]" type="http">
        current web site</ulink> where the current coordination occurs includes a
        <ulink url="http://lists.jump-project.org/pipermail/jts-devel/" type="http">
        mailing list</ulink>. JTS releases are hosted on the
        <ulink url="http://sourceforge.net/projects/jts-topo-suite/" type="http">
        sourceforge site</ulink>.
      </para>

      <para>
        The JTS Javadocs also contain useful information, although, through 
        version 1.7.1, these are fairly thin except for:
        <itemizedlist>
          <listitem>
            <para>
              Package com.vividsolutions.jts.algorithm#Description (scroll down)
            </para>
          </listitem>
          <listitem>
            <para>
              Package com.vividsolutions.jts.overlay#Description
            </para>
          </listitem>
          <listitem>
            <para>
              Package com.vividsolutions.jts.relate#Description
            </para>
          </listitem>
          <listitem>
            <para>
              Class com.vividsolutions.jts.Geometry
            </para>
          </listitem>
        </itemizedlist>
      </para>

      <para>
        JTS also has useful documentation in the zip distribution itself, in the 
        'doc/' directory. This includes: 
        <itemizedlist>
          <listitem>
            <para>
              The JTS Developer Guide
            </para>
          </listitem>
          <listitem>
            <para>
              The JTS Technical Specification
            </para>
          </listitem>
        </itemizedlist>
        which are valuable resources to understand the issue of computational 
        precision in the JTS library.
      </para>

    </sect2>
    <!--
    <sect2 id="">
      <title></title>

      <para>
        
      </para>

    </sect2>
    -->
  </sect1>
  
  
  
  
  <sect1 id="sect-geomJTS-practical">
    <title>Practical Information </title>

    <para>
      
    </para>

    <sect2 id="sect-geomJTS-practical-utilClass">
      <title>Utility Classes</title>

      <para>
      </para>

    </sect2>

    <sect2 id="sect-geomJTS-practical-factory">
      <title>Factory System</title>

      <para>
      </para>

    </sect2>


    <sect2 id="sect-geomJTS-practical-precision">
      <title>Precision Model</title>

      <para>
      </para>

    </sect2>

  </sect1>
  
  
  
  
  <sect1 id="sect-geomJTS-classes">
    <title>Principal Classes</title>

    <para>
      
    </para>
    
    <sect2 id="sect-geomJTS-Coordinate">
      <title>Coordinates</title>

      <para>
        JTS Coordinate objects are lightweight entities with fields 
        (.x, .y, and .z), each holding a 'double' value.
        <figure id="fig-geotools-geomJTS-coord">
          <title>JTS Coordinates.</title>
          <screenshot>
            <mediaobject>
            <imageobject>
              <imagedata fileref="figures/JTS_Coordinate.png" 
                         format="PNG" />
            </imageobject>
            <textobject>
              <phrase>
                An image of the JTS Coordinate class.
              </phrase>
            </textobject>
    	<caption>
    	  <para>
    	    Key aspects of the JTS Coordinate class.
    	  </para>
    	</caption>
            </mediaobject>
          </screenshot>
        </figure>
      </para>

      <warning>
        <title>JTS Operations are 2D only</title>
        <para>
          While JTS allows the inclusion of a thrid 'z' coordinate, <emphasis>this coordinate is never used in JTS operations</emphasis>! JTS performs all of its operations in the projected x-y plane. 
        </para>
      </warning>

      <para>
        Instances of these Coordinate values provide the spatial information for the JTS Geometry objects. Construction of Coordinate objects involves simple calls to the class constructor methods.
      </para>


    </sect2>
    
    
    
    <sect2 id="sect-geomJTS-Envelope">
      <title>Envelopes</title>

      <para>
         JTS Envelope objects are axis parallel, rectangular regions of the x-y plane. Instances of this class are used expecially to define the outer extent of each JTS Geometry and every Geotools Feature using the concept of a 'bounding-box' which is an axis-parallel, rectilinear region.
        <figure id="fig-geotools-geomJTS-envelope">
          <title>JTS Envelope.</title>
          <screenshot>
            <mediaobject>
            <imageobject>
              <imagedata fileref="figures/JTS_Envelope.png" 
                         format="PNG" />
            </imageobject>
            <textobject>
              <phrase>
                An image of the JTS Envelope class.
              </phrase>
            </textobject>
    	<caption>
    	  <para>
    	    Key aspects of the JTS Envelope class.
    	  </para>
    	</caption>
            </mediaobject>
          </screenshot>
        </figure>
      </para>

      <para>
         Construction of Envelope objects involves simple calls to the class constructor methods.
      </para>

    </sect2>
    
    
    
    <sect2 id="sect-geomJTS-geometry">
      <title>Geometries</title>

      <para>
        JTS Geometry objects define the fundamental spatial elements in the Geotools Geometric Model. JTS Geometry objects include Point, LineString, with a LinearRing which has a common end-point coordinate, Polygon, and Collection sub-classes, the latter further sub-classed into MultiPoint, MultiLineString, and MultiPolygon.
        <figure id="fig-geotools-geomJTS-geom">
          <title>JTS Envelope.</title>
          <screenshot>
            <mediaobject>
            <imageobject>
              <imagedata fileref="figures/JTS_Geometry.png" 
                         format="PNG" />
            </imageobject>
            <textobject>
              <phrase>
                An image of the JTS Geometry class.
              </phrase>
            </textobject>
    	<caption>
    	  <para>
    	    Key aspects of the JTS Geometry class.
    	  </para>
    	</caption>
            </mediaobject>
          </screenshot>
        </figure>
      </para>

      <para>
        Conceptually, Geometry objects have, as internal fields, Coordinate objects to define the spatial nature of the Geometry, a type element describing the nature of the Geometry, an Envelope object defining the extent of the Geometry, and an optional User Data object element in which any object can be stored for programmatic convenience. Geometry objects include convenience methods such as the toText() method which converts any Geometry instance into an equivalent representation in Well Known Text (WKT) a formally defined representation of the spatial definintion of the Geometry object using a Java String. Geometry objects also include a number of spatial operator methods such as two returing Java double values, distance() and area(), and two returning new Geometry objects, convexHull() and buffer(). Construction of Geometry objects is done through the creation of a GeometryFactory object as explained in the first tutorial.
      </para>
      
    </sect2>
    
  </sect1>
  
  
  
  
  <sect1 id="sect-geomJTS-tutorial">
    <title>Tutorial</title>

    <para>
      The "gt/demo/geomJTS/" directory has a number of tutorials which might be 
      useful to understand the JTS library and the &geot; geometry model.
    </para>
    <!--
    <sect2 id="">
      <title></title>

      <para>
        
      </para>

    </sect2>
    -->
  </sect1>
  
  
  
  
  <sect1 id="sect-geomJTS-readon">
    <title>Reading More</title>

    <para>
      
    </para>
    <!--
    <sect2 id="">
      <title></title>

      <para>
        
      </para>

    </sect2>
    -->
  </sect1>
  
  
  
  
  <sect1 id="sect-geomJTS-extending">
    <title>Extending</title>

    <para>
      
    </para>
    <!--
    <sect2 id="">
      <title></title>

      <para>
        
      </para>

    </sect2>
    -->
  </sect1>

</chapter>
