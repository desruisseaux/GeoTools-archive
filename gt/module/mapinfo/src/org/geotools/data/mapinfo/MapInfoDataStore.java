/*
 *    Geotools - OpenSource mapping toolkit
 *    (C) 2002, Centre for Computational Geography
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
package org.geotools.data.mapinfo;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import org.geotools.data.AbstractDataStore;
import org.geotools.data.DataUtilities;
import org.geotools.data.FeatureReader;
import org.geotools.data.Query;
import org.geotools.feature.FeatureCollection;
import org.geotools.feature.FeatureCollections;
import org.geotools.feature.FeatureType;

/**
 * Reanimating the zombie MapInfoDataSource.
 * <p>
 * This is the worst possible DataStore you can imagine, it simply slaves
 * a FeatureCollection generated by the zombie MapInfoDataSource.
 * </p>
 * 
 * @author Jody Garnett
 */
public class MapInfoDataStore extends AbstractDataStore {
    
    MapInfoDataSource zombie;

    /**
     * Construct MapInfoDataStore and attach it to the specified file.
     * <p>
     * TODO: Hook this up with the directory datastore.
     * </p>
     * 
     * @param url location of the mif file to read
     * @throws MalformedURLException
     * @throws MalformedURLException invalid URL was used
     */    
    public MapInfoDataStore( URL url) throws IOException {
        super( false );
        zombie = new MapInfoDataSource( url );
    }

    public String[] getTypeNames() {
        return new String[]{ zombie.getSchema().getTypeName(), };
    }

    public FeatureType getSchema(String typeName) throws IOException {
        if( typeName != null && typeName.equals( zombie.getSchema().getTypeName() )){
            return zombie.getSchema();
        }
        return null;
    }
    protected FeatureReader getFeatureReader(String typeName, Query query)
            throws IOException {
        FeatureCollection features = FeatureCollections.newCollection();
        zombie.getFeatures( features, query );        
        return DataUtilities.reader( features );
        
    }
    protected FeatureReader getFeatureReader(String typeName)
            throws IOException {
        return getFeatureReader( typeName, Query.ALL );
    }
}
