/*
 *    uDig - User Friendly Desktop Internet GIS client
 *    http://udig.refractions.net
 *    (C) 2004, Refractions Research Inc.
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 */
package org.geotools.gtcatalog;

import java.io.IOException;
import java.net.URI;
import java.util.List;

import org.geotools.util.ProgressListener;

/**
 * Blocking IAdaptable, used to contact external services.
 * 
 * @author David Zwiers, Refractions Research
 * @author Justin Deoliveira, The Open Planning Project
 * @since 0.7.0
 * @see IAdaptable
 */
public interface Resolve {

    /**
     * Will attempt to morph into the adaptee, and return that object.
     * <p>
     * Required adaptions will be listed in Abstract Classes.
     * </p>
     * May Block.
     * 
     * @param adaptee
     * @param monitor May Be Null
     * @return Instance of type adaptee, or null if adaptee is unsuported.
     * @throws IOException if result was unavailable due to a technical problem
     */
    Object resolve( Class adaptee, ProgressListener monitor ) throws IOException;

    /**
     * Required adaptions will be listed in Abstract Classes under the resolve() method.
     * <p>
     * May not Block, and *MUST NOT* throw any exceptions.
     * </p>
     * 
     * @see IResolve#resolve(Class,ProgressListener)
     * @return true if a resolution for adaptee is avaialble
     */
    boolean canResolve( Class adaptee );

    /**
     * The parent of this handle, may be null if parent unknown.
     * 
     * @param monitor used to provide feedback during parent lookup
     * @return Parent IResolve, null if unknown
     * @throws IOException in the event of a technical problem
     */
    Resolve parent( ProgressListener monitor ) throws IOException;

    /**
     * Contents of this handle, null iff this is a leaf.
     * 
     * @param monitor Monitor used to provide feedback during member lookup
     * @return List, possibly empty, of members. Will be null if this is a leaf.
     * @throws IOException in the event of a technical problem
     */
    List members( ProgressListener monitor ) throws IOException;

    class Status {
    	/** Status constant indicates a live connection in use */
        public static final Status CONNECTED = new Status();

        /** Status constant indicates a connection that is not in use */
        public static final Status NOTCONNECTED = new Status();

        /** Status constant indicates a connection that is broken */
        public static final Status BROKEN = new Status();
        
    	private Status() {}
    }
    

    /**
     * Status information for this service.
     * <p>
     * In the future this may be extended into a bit mask of connection status.
     * </p>
     * 
     * @return Status of CONNECTED, NOTCONNECTED or BROKEN
     */
    Status getStatus();

    /**
     * Text description for this serice status.
     * <p>
     * For a BROKEN status this will contain the error message, null will be returned if there is
     * nothing interesting to report.
     * <p>
     * <p>
     * Not the Exception is ecpected to be in humar readable, terms.
     * </p>
     * 
     * @return Text describing service status
     */
    Throwable getMessage();

    /**
     * A unique resource identifier ... this should be unique for each service.
     * <p>
     * This is generated by the IServiceFactory.
     * </p>
     * May Not Block.
     * 
     * @return ID for this IResolve, should not be null.
     */
    URI getIdentifier();
    
    /**
     * @param listener
     */
    void addListener( ResolveChangeListener listener );

    /**
     * @param listener
     */
    void removeListener( ResolveChangeListener listener );
    
    /**
     * Fires a change event against the resolve.
     * 
     * @param event The event describing the change.
     */
    void fire(ResolveChangeEvent event);

}